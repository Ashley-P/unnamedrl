TODO:

- FOV
- Pathfinding
- AI
    - Basic stuff
    - Enemies have other things to do than kill the player
    - Makes plans to kill player
- Enemies
- Items
    - Weapons
        - Weapon customisation
    - Armour
    - Comestibles
    - Utility items
- Crafting
- Interaction
    - With items
    - With map objects
- Map generation
    - Hub Overworld (random?)
    - Individual Maps (Definitely randomised)
- Quest/Mission System
- Destructible terrain? 
+ Debug Mode/Menu
    * Logging
    - Test Arena
    - Spawning






----- COMPONENTS -----
Attack component:
- Damage
- Armour penetration
- Ammunition required (if needed)
- Range
- Cooldown?
- Multiple attacks (each with a the above attributes)

Defense component:
- Damage mitigation (%)
- Protection vs environment (maybe multiple environment types)

Item component:
- Weight
- Size?
- Let's the item be stored in an inventory
- Maybe a general type variable
- Stack size

Inventory/Storage component: (Could be used for wearing and wielding stuff too)
- Let's items be stored in it (just uids to entities)
- Storage size (current and max)

Speech/Text/Quest component: (Could be done seperate from the ECS)
- Let's the player interact with it

Sight component:
- Sight radius
- Night vision

Smell component:
- Smell map
- Smell strength 

Hearing component:
- Noise map
- Noise strength

Appearance component:
- Short description
- Long description

Consumable component:
- Let's the component be used for some sort of gain

Ammunition component:
- extra damage
- status effects






----- ITEMS/ENTITIES/OBJECTS -----
Required reading
http://roguebasin.roguelikedevelopment.org/index.php?title=Info_Files
http://roguebasin.roguelikedevelopment.org/index.php?title=Info_File_Variant_-_Compile-to-Code

@NOTE : Actual specification of this markup language will be elsewhere these are just semi-unordered ideas

Stuff like items need to be put in a seperate text file
Before lexing proper, we would get all the files in a directory named "entity" or "raws" and 
put every filename that ends in ".raw" or ".entity" in a list which is scanned later.


Preprocessor:
Have a basic preprocessor that acts upon each file and searches for lines that start with a bang (!) or double bang (!!)
These are special lines which are like commands given to alter something about the file 
e.g !READ_FIRST would alter the read list of the scanner to put the file at the start





Keyword ideas:
!!! They must be all caps for easy recognition !!!

*** Preprocessor keywords ***

- READ_FIRST:
This would place the filename of the file at the start of the scanlist




*** Normal keywords ***
- BASE_TYPE
Sets the next object to be read as a special blueprint that doesn't make it into the final game, but allows it to be INHERITed
by other objects

- INHERITS <object name>
Inherits the components and values of a blueprint with the name of the provided argument. Should only work if the argument blueprint
has been created.

- COMPONENT_NAME (without the C_ part)
Defines a component for the blueprint arguments follow to the side or below

- 





Syntax ideas:
Bangs (!) and double bangs (!!) for special commands
# for comments
Remember to check newlines
object type := MONSTER, ITEM (Maybe expand this or have a sub type for the item)
All keywords are in ALL CAPS











----- DEBUG MODE THOUGHTS -----
Opens a file at game start that it logs everything from start to finish
Has a command line along with various debug messages (which means I have to implement a parser)

Something like this and goes at the top of the screen


Idea from Johnny :- Have the error file compress when it gets to a certain size and start a new one

+------------------------------------+
|                                    |
|                                    |
|                                    |
|debug message 2                     |
|debug message 1                     |
+------------------------------------+
|>_                                  |
+------------------------------------+

Should be called from any menu?

--- Commands ideas --- 
- Spawn actor/object
- Delete actor/object
- Get ID/address of actor/object under cursor
- Change vision modes (Visual of Djikstra maps or something)
- Raw editing of actors/objects?
- Move actors/objects/player
- Toggle FOV
+ Echo (more of a test command)

--- Other ideas for the command line ---
- Autocomplete commands (never gonna do this)
- Clipboard
* Command history
- Scrolling the history


--- Command structure ---
>COMMAND ARGUMENTS...
The first word in each line is the command and the rest of the words/numbers are arguments
The word is checked on against a list and returns a message if it's not on there.
If it is on the list, then the corresponding function is ran with it's arguments.
Inside the function there is some error checking against the arguments. Might be able to emulate
function overloading too with different kinds of arguments. (Should be easy considering you would know
that if a function is called, you know what arguments it should be taking)
